//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/inGame.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InGame : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InGame()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""inGame"",
    ""maps"": [
        {
            ""name"": ""keyBoard"",
            ""id"": ""9a37c5d6-732c-47e3-8804-cb1f37613193"",
            ""actions"": [
                {
                    ""name"": ""LClick"",
                    ""type"": ""Button"",
                    ""id"": ""3471ae75-d752-4afd-b7c0-3d4d59a8bc20"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RClick"",
                    ""type"": ""Button"",
                    ""id"": ""568de606-ddde-4aec-a427-d07251816c57"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WClick"",
                    ""type"": ""Button"",
                    ""id"": ""ca4eb9a8-841d-4080-83c2-b327389b12b5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""mouse"",
                    ""type"": ""PassThrough"",
                    ""id"": ""bdba56d1-1d10-49c1-bf56-4cb6a208ced4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ed36feb0-d648-4ccf-99fb-af375c5176e3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f7f4388-c4f7-4adc-8c7d-91c74dfeac86"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e6b48367-e0d6-4611-9c5c-2e21e6a3fb6e"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5d54e98-5f28-4a68-8ec3-be1c7e745ba2"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // keyBoard
        m_keyBoard = asset.FindActionMap("keyBoard", throwIfNotFound: true);
        m_keyBoard_LClick = m_keyBoard.FindAction("LClick", throwIfNotFound: true);
        m_keyBoard_RClick = m_keyBoard.FindAction("RClick", throwIfNotFound: true);
        m_keyBoard_WClick = m_keyBoard.FindAction("WClick", throwIfNotFound: true);
        m_keyBoard_mouse = m_keyBoard.FindAction("mouse", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // keyBoard
    private readonly InputActionMap m_keyBoard;
    private IKeyBoardActions m_KeyBoardActionsCallbackInterface;
    private readonly InputAction m_keyBoard_LClick;
    private readonly InputAction m_keyBoard_RClick;
    private readonly InputAction m_keyBoard_WClick;
    private readonly InputAction m_keyBoard_mouse;
    public struct KeyBoardActions
    {
        private @InGame m_Wrapper;
        public KeyBoardActions(@InGame wrapper) { m_Wrapper = wrapper; }
        public InputAction @LClick => m_Wrapper.m_keyBoard_LClick;
        public InputAction @RClick => m_Wrapper.m_keyBoard_RClick;
        public InputAction @WClick => m_Wrapper.m_keyBoard_WClick;
        public InputAction @mouse => m_Wrapper.m_keyBoard_mouse;
        public InputActionMap Get() { return m_Wrapper.m_keyBoard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyBoardActions set) { return set.Get(); }
        public void SetCallbacks(IKeyBoardActions instance)
        {
            if (m_Wrapper.m_KeyBoardActionsCallbackInterface != null)
            {
                @LClick.started -= m_Wrapper.m_KeyBoardActionsCallbackInterface.OnLClick;
                @LClick.performed -= m_Wrapper.m_KeyBoardActionsCallbackInterface.OnLClick;
                @LClick.canceled -= m_Wrapper.m_KeyBoardActionsCallbackInterface.OnLClick;
                @RClick.started -= m_Wrapper.m_KeyBoardActionsCallbackInterface.OnRClick;
                @RClick.performed -= m_Wrapper.m_KeyBoardActionsCallbackInterface.OnRClick;
                @RClick.canceled -= m_Wrapper.m_KeyBoardActionsCallbackInterface.OnRClick;
                @WClick.started -= m_Wrapper.m_KeyBoardActionsCallbackInterface.OnWClick;
                @WClick.performed -= m_Wrapper.m_KeyBoardActionsCallbackInterface.OnWClick;
                @WClick.canceled -= m_Wrapper.m_KeyBoardActionsCallbackInterface.OnWClick;
                @mouse.started -= m_Wrapper.m_KeyBoardActionsCallbackInterface.OnMouse;
                @mouse.performed -= m_Wrapper.m_KeyBoardActionsCallbackInterface.OnMouse;
                @mouse.canceled -= m_Wrapper.m_KeyBoardActionsCallbackInterface.OnMouse;
            }
            m_Wrapper.m_KeyBoardActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LClick.started += instance.OnLClick;
                @LClick.performed += instance.OnLClick;
                @LClick.canceled += instance.OnLClick;
                @RClick.started += instance.OnRClick;
                @RClick.performed += instance.OnRClick;
                @RClick.canceled += instance.OnRClick;
                @WClick.started += instance.OnWClick;
                @WClick.performed += instance.OnWClick;
                @WClick.canceled += instance.OnWClick;
                @mouse.started += instance.OnMouse;
                @mouse.performed += instance.OnMouse;
                @mouse.canceled += instance.OnMouse;
            }
        }
    }
    public KeyBoardActions @keyBoard => new KeyBoardActions(this);
    public interface IKeyBoardActions
    {
        void OnLClick(InputAction.CallbackContext context);
        void OnRClick(InputAction.CallbackContext context);
        void OnWClick(InputAction.CallbackContext context);
        void OnMouse(InputAction.CallbackContext context);
    }
}
